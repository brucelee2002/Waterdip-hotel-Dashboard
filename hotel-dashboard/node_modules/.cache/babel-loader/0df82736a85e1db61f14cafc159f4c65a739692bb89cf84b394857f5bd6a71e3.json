{"ast":null,"code":"var _jsxFileName = \"D:\\\\EVERYTHING\\\\Waterdip\\\\frontend_project\\\\hotel-dashboard\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport LineChart from './components/TimeSeriesChart'; // Import LineChart component\nimport ColumnChart from './components/ColumnChart'; // Import ColumnChart component\nimport SparklineChart from './components/SparklineChart'; // Import SparklineChart component\nimport './App.css'; // Import styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Import axios for API requests\n\nconst App = () => {\n  _s();\n  const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0]); // Set initial startDate to current date\n  const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]); // Set initial endDate to current date\n  const [chartData, setChartData] = useState({}); // Initialize state for chart data\n  const [error, setError] = useState(''); // Initialize error state\n\n  setChartData({\n    timeSeries: [{\n      date: '2015-06-30',\n      count: 63\n    }],\n    visitorsByCountry: [{\n      country: 'PRT',\n      count: 36\n    }, {\n      country: 'GBR',\n      count: 13\n    }, {\n      country: 'USA',\n      count: 2\n    }, {\n      country: 'ESP',\n      count: 3\n    }, {\n      country: 'IRL',\n      count: 6\n    }, {\n      country: 'FRA',\n      count: 2\n    }, {\n      country: 'NULL',\n      count: 1\n    }],\n    totalAdults: 62,\n    totalChildren: 1\n  });\n  // Function to fetch data from API\n  // const fetchData = async () => {\n  //     try {\n  //         // Ensure startDate and endDate are defined\n  //         if (startDate && endDate) {\n  //             const response = await axios.get('http://localhost:5000/api/data', { \n  //                 params: { start: \"2015-07-01\", end: \"2015-07-01\" } // Fetch data based on date range\n  //             });\n  //             console.log(response);\n  //             setChartData(response.data); // Set the received data\n  //             setError(''); // Clear error if data is fetched successfully\n  //         } else {\n  //             setError('Please select both start and end dates.'); // Error for missing dates\n  //         } \n  //     } catch (error) {\n  //         console.error('Error fetching data', error); // Log error in the console\n  //         setError('Failed to fetch data. Please try again.'); // Set error message\n  //     }\n  // };\n  // fetchData();\n\n  // Fetch data whenever startDate or endDate changes\n  // useEffect(() => {\n  //     if (startDate && endDate && new Date(startDate) <= new Date(endDate)) {\n  //         fetchData(); // Fetch data if the date range is valid\n  //     } else {\n  //         setError('Invalid date range selected.'); // Set error for invalid date range\n  //     }\n  // }, [startDate, endDate]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hotel Booking Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-picker-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startDate\",\n        children: \"Start Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"startDate\",\n        value: startDate,\n        onChange: e => setStartDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endDate\",\n        children: \"End Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"endDate\",\n        value: endDate,\n        onChange: e => setEndDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }, this), \" \", chartData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-title\",\n          children: \"Number of Visitors per Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), chartData.timeSeries && /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData.timeSeries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 50\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-title\",\n          children: \"Number of Visitors per Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), chartData.visitorsByCountry && /*#__PURE__*/_jsxDEV(ColumnChart, {\n          data: chartData.visitorsByCountry // Pass the visitors by country data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sparkline-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sparkline-chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-title\",\n            children: \"Total Adult Visitors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SparklineChart, {\n            data: chartData.totalAdults ? [chartData.totalAdults] : [],\n            label: \"Adults\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sparkline-chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-title\",\n            children: \"Total Children Visitors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SparklineChart, {\n            data: chartData.totalChildren ? [chartData.totalChildren] : [],\n            label: \"Children\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"KtB9I/kWbLFZTJjibFljOzBmzio=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","LineChart","ColumnChart","SparklineChart","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","startDate","setStartDate","Date","toISOString","split","endDate","setEndDate","chartData","setChartData","error","setError","timeSeries","date","count","visitorsByCountry","country","totalAdults","totalChildren","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","data","label","_c","$RefreshReg$"],"sources":["D:/EVERYTHING/Waterdip/frontend_project/hotel-dashboard/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LineChart from './components/TimeSeriesChart'; // Import LineChart component\nimport ColumnChart from './components/ColumnChart';  // Import ColumnChart component\nimport SparklineChart from './components/SparklineChart'; // Import SparklineChart component\nimport './App.css'; // Import styles\nimport axios from 'axios'; // Import axios for API requests\n\nconst App: React.FC = () => {\n    const [startDate, setStartDate] = useState<string>(new Date().toISOString().split('T')[0]); // Set initial startDate to current date\n    const [endDate, setEndDate] = useState<string>(new Date().toISOString().split('T')[0]); // Set initial endDate to current date\n    const [chartData, setChartData] = useState<any>({}); // Initialize state for chart data\n    const [error, setError] = useState<string>(''); // Initialize error state\n\n\n    setChartData(\n        {\n          timeSeries: [ { date: '2015-06-30', count: 63 } ],\n          visitorsByCountry: [\n            { country: 'PRT', count: 36 },\n            { country: 'GBR', count: 13 },\n            { country: 'USA', count: 2 },\n            { country: 'ESP', count: 3 },\n            { country: 'IRL', count: 6 },\n            { country: 'FRA', count: 2 },\n            { country: 'NULL', count: 1 }\n          ],\n          totalAdults: 62,\n          totalChildren: 1\n        });\n    // Function to fetch data from API\n    // const fetchData = async () => {\n    //     try {\n    //         // Ensure startDate and endDate are defined\n    //         if (startDate && endDate) {\n    //             const response = await axios.get('http://localhost:5000/api/data', { \n    //                 params: { start: \"2015-07-01\", end: \"2015-07-01\" } // Fetch data based on date range\n    //             });\n    //             console.log(response);\n    //             setChartData(response.data); // Set the received data\n    //             setError(''); // Clear error if data is fetched successfully\n    //         } else {\n    //             setError('Please select both start and end dates.'); // Error for missing dates\n    //         } \n    //     } catch (error) {\n    //         console.error('Error fetching data', error); // Log error in the console\n    //         setError('Failed to fetch data. Please try again.'); // Set error message\n    //     }\n    // };\n    // fetchData();\n\n   // Fetch data whenever startDate or endDate changes\n    // useEffect(() => {\n    //     if (startDate && endDate && new Date(startDate) <= new Date(endDate)) {\n    //         fetchData(); // Fetch data if the date range is valid\n    //     } else {\n    //         setError('Invalid date range selected.'); // Set error for invalid date range\n    //     }\n    // }, [startDate, endDate]);\n\n    return (\n        <div className=\"dashboard-container\">\n            <div className=\"header\">\n                <h1>Hotel Booking Dashboard</h1> {/* Header for the dashboard */}\n            </div>\n            <div className=\"date-picker-container\">\n                <label htmlFor=\"startDate\">Start Date: </label>\n                <input \n                    type=\"date\" \n                    id=\"startDate\" \n                    value={startDate} \n                    onChange={e => setStartDate(e.target.value)} \n                />\n                <label htmlFor=\"endDate\">End Date: </label>\n                <input \n                    type=\"date\" \n                    id=\"endDate\" \n                    value={endDate} \n                    onChange={e => setEndDate(e.target.value)} \n                />\n            </div>\n\n            {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\n\n            {chartData && (\n                <>\n                    <div className=\"chart-container\">\n                        <div className=\"chart-title\">Number of Visitors per Day</div>\n                        {chartData.timeSeries && <LineChart data={chartData.timeSeries} />} {/* Pass time series data to LineChart */}\n                    </div>\n\n                    <div className=\"chart-container\">\n                        <div className=\"chart-title\">Number of Visitors per Country</div>\n                        {chartData.visitorsByCountry && (\n                            <ColumnChart \n                                data={chartData.visitorsByCountry} // Pass the visitors by country data\n                            />\n                        )}\n                    </div>\n\n                    <div className=\"sparkline-container\">\n                        <div className=\"sparkline-chart\">\n                            <div className=\"chart-title\">Total Adult Visitors</div>\n                            <SparklineChart data={chartData.totalAdults ? [chartData.totalAdults] : []} label=\"Adults\" />\n                        </div>\n                        <div className=\"sparkline-chart\">\n                            <div className=\"chart-title\">Total Children Visitors</div>\n                            <SparklineChart data={chartData.totalChildren ? [chartData.totalChildren] : []} label=\"Children\" />\n                        </div>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}