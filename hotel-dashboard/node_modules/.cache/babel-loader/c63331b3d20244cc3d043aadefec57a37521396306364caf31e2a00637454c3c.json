{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst app = express();\napp.use(cors()); // Enable CORS for all routes\n\nconst bookings = [];\n\n// Load CSV data into memory\nfs.createReadStream('hotel_bookings_1000.csv').pipe(csv()).on('data', row => {\n  const {\n    arrival_date_year,\n    arrival_date_month,\n    arrival_date_day_of_month,\n    adults,\n    children,\n    babies,\n    country\n  } = row;\n  const date = new Date(`${arrival_date_year}-${arrival_date_month}-${arrival_date_day_of_month}`);\n  bookings.push({\n    date,\n    adults: +adults,\n    children: +children,\n    babies: +babies,\n    country\n  });\n}).on('end', () => {\n  console.log('CSV file successfully processed');\n});\n\n// API to filter data by date range\napp.get('/api/data', (req, res) => {\n  const {\n    start,\n    end\n  } = req.query;\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n\n  // Filter bookings based on date range\n  const filteredData = bookings.filter(booking => booking.date >= startDate && booking.date <= endDate);\n\n  // Aggregating data for charts\n  const timeSeries = {};\n  const countryData = {};\n  let adultsTotal = 0;\n  let childrenTotal = 0;\n  filteredData.forEach(booking => {\n    const dateStr = booking.date.toISOString().split('T')[0];\n    // Aggregate data for time series\n    timeSeries[dateStr] = (timeSeries[dateStr] || 0) + booking.adults + booking.children + booking.babies;\n    // Aggregate data for country\n    countryData[booking.country] = (countryData[booking.country] || 0) + booking.adults + booking.children + booking.babies;\n    adultsTotal += booking.adults;\n    childrenTotal += booking.children;\n  });\n\n  // Convert time series object to array for the frontend\n  const timeSeriesData = Object.entries(timeSeries).map(([date, count]) => ({\n    date,\n    count\n  }));\n\n  // Prepare country data for the frontend\n  const countries = Object.keys(countryData);\n  const visitorsByCountry = countries.map(country => countryData[country]);\n  res.json({\n    timeSeries: timeSeriesData,\n    // Send the aggregated time series data\n    visitorsByCountry,\n    // Send the visitors count by country\n    totalAdults: adultsTotal,\n    // Total number of adults\n    totalChildren: childrenTotal // Total number of children\n  });\n});\nconst PORT = 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","fs","csv","app","use","bookings","createReadStream","pipe","on","row","arrival_date_year","arrival_date_month","arrival_date_day_of_month","adults","children","babies","country","date","Date","push","console","log","get","req","res","start","end","query","startDate","endDate","filteredData","filter","booking","timeSeries","countryData","adultsTotal","childrenTotal","forEach","dateStr","toISOString","split","timeSeriesData","Object","entries","map","count","countries","keys","visitorsByCountry","json","totalAdults","totalChildren","PORT","listen"],"sources":["D:/EVERYTHING/Waterdip/frontend_project/hotel-dashboard/src/App.tsx"],"sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst csv = require('csv-parser');\n\nconst app = express();\napp.use(cors()); // Enable CORS for all routes\n\nconst bookings = [];\n\n// Load CSV data into memory\nfs.createReadStream('hotel_bookings_1000.csv')\n  .pipe(csv())\n  .on('data', (row) => {\n    const { arrival_date_year, arrival_date_month, arrival_date_day_of_month, adults, children, babies, country } = row;\n    const date = new Date(`${arrival_date_year}-${arrival_date_month}-${arrival_date_day_of_month}`);\n    bookings.push({ date, adults: +adults, children: +children, babies: +babies, country });\n  })\n  .on('end', () => {\n    console.log('CSV file successfully processed');\n  });\n\n// API to filter data by date range\napp.get('/api/data', (req, res) => {\n  const { start, end } = req.query;\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n\n  // Filter bookings based on date range\n  const filteredData = bookings.filter(booking => booking.date >= startDate && booking.date <= endDate);\n\n  // Aggregating data for charts\n  const timeSeries = {};\n  const countryData = {};\n  let adultsTotal = 0;\n  let childrenTotal = 0;\n\n  filteredData.forEach(booking => {\n    const dateStr = booking.date.toISOString().split('T')[0];\n    // Aggregate data for time series\n    timeSeries[dateStr] = (timeSeries[dateStr] || 0) + booking.adults + booking.children + booking.babies;\n    // Aggregate data for country\n    countryData[booking.country] = (countryData[booking.country] || 0) + booking.adults + booking.children + booking.babies;\n    adultsTotal += booking.adults;\n    childrenTotal += booking.children;\n  });\n\n  // Convert time series object to array for the frontend\n  const timeSeriesData = Object.entries(timeSeries).map(([date, count]) => ({ date, count }));\n  \n  // Prepare country data for the frontend\n  const countries = Object.keys(countryData);\n  const visitorsByCountry = countries.map(country => countryData[country]);\n\n  res.json({\n    timeSeries: timeSeriesData, // Send the aggregated time series data\n    visitorsByCountry, // Send the visitors count by country\n    totalAdults: adultsTotal, // Total number of adults\n    totalChildren: childrenTotal // Total number of children\n  });\n});\n\nconst PORT = 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}